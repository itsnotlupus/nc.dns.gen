var iputils = require("./iputils");
var wait = new (require("./Wait"));

/**
 *  Don't bother support some lame approximation of zone forwarding.
 *  Just take IP# as given and map to hosts. no wildcards either.
 *
 */
function generateHostsConf(obj, filename, callback) {
    var config = [ "# This file was generated by "+process.argv[1]+" on "+new Date, '' ]; // will hold the dnsmasq.conf entries

    function addConfigLine(sub, domain, dst) {
      var host = (sub==""?domain:sub+"."+domain)+".bit";
      if (!iputils.isPlausibleDomain(host)) return;
      if (iputils.isIPv4Address(dst)) {
        if (iputils.isRoutableIPv4Address(dst)) {
          config.push(dst+"\t"+host);
        }
      } else {
        iputils.lookupDomain(dst, wait.for(function(err,data) {
          if (!err) {
            addConfigLine(dst+"\t"+host);
          }
        }));
      }
    }

    // start with legacy parsing for now
    for (var name in obj) {
      var value = obj[name];
      if (value.map) {
        for (var key in value.map) {
          var item = value.map[key];
          if (typeof item == "string") {
            // should be an IP address
            addConfigLine(key, name, item);
          } else if (item) {
            // probably an object. check for "ns" and "translate" fields.
            if (item.ns) {
              // not supported in hosts files.
            }
            if (item.translate) {
              // not supported.
            }
          } else {
            // invalid map field. probably "null" or somesuch nonsense. ignore.
          }
        }
      }
    }

    wait.on("done", function() {
      var data = config.join('\n');
      require("fs").writeFile(filename, data, 'utf8', callback);
    });
    wait.start();

}

module.exports = {
  generateHostsConf: generateHostsConf
};
